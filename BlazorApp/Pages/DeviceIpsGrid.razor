@page "/DeviceIps/{DeviceId:int}"
@inject IDeviceIpData deviceIpData

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h2>IP Addresses</h2>
</div>

<TelerikGrid Data="deviceIpsList" EditMode="@GridEditMode.Inline" OnUpdate="@HandleUpdate" OnCreate="@HandleCreate" OnDelete="@HandleDelete"
             Pageable="true" Sortable="true" FilterMode="@GridFilterMode.FilterMenu" ConfirmDelete="true" Resizable="true"
             ShowColumnMenu="true" Reorderable="true" Groupable="true">
    <GridToolBar>
        <GridSearchBox Width="300px;" />
        <GridCommandButton Command="Add" Icon="add" ThemeColor="primary">Add IP</GridCommandButton>
        <GridCommandButton Command="ExcelExport" Icon="file-excel">Export to Excel</GridCommandButton>
    </GridToolBar>

    <GridColumns>     
        <GridColumn Field="IpAddress" Title="IP Address" ></GridColumn>
        <GridColumn Field="MacAddress" Title="MAC Address" ></GridColumn>
        <GridCommandColumn>          
            <GridCommandButton Command="Edit" Icon="edit" ThemeColor="primary" Size="Small">Edit</GridCommandButton>
            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true" Size="Small">Apply Changes</GridCommandButton>
            <GridCommandButton Command="EditScanGroups" ThemeColor="info" Size="Small">Edit ACAS scan groups</GridCommandButton>
            <GridCommandButton Command="Delete" ThemeColor="error" Size="Small">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

@code {
    [Parameter]
    public int DeviceId { get; set; }

    private List<DeviceIpModel> deviceIpsList;

    protected override async Task OnParametersSetAsync()
    {
        deviceIpsList = await deviceIpData.GetDeviceIps(DeviceId);
    }

    private async Task HandleUpdate(GridCommandEventArgs args)
    {
        DeviceIpModel deviceIp = (DeviceIpModel)args.Item;
        await deviceIpData.UpdateDeviceIp(deviceIp);
        deviceIpsList = await deviceIpData.GetDeviceIps(DeviceId);
    }

    private async Task HandleCreate(GridCommandEventArgs args)
    {
        DeviceIpModel deviceIp = (DeviceIpModel)args.Item;
        deviceIp.DeviceId = DeviceId;
        await deviceIpData.CreateDeviceIp(deviceIp);
        deviceIpsList = await deviceIpData.GetDeviceIps(DeviceId);
    }

    private async Task HandleDelete(GridCommandEventArgs args)
    {
        DeviceIpModel deviceIp = (DeviceIpModel)args.Item;
        await deviceIpData.DeleteDeviceIp(deviceIp.Id);
        deviceIpsList = await deviceIpData.GetDeviceIps(DeviceId);
    }

}
