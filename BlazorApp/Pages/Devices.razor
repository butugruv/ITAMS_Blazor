@page "/Devices"
@inject IDeviceData deviceData


        <h2>Devices</h2>

        @if (deviceList == null)
        {
            <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {

            <TelerikGrid Data="@deviceList" Pageable="true" Sortable="true" FilterMode="@GridFilterMode.FilterRow" Resizable="true">
                <GridColumns>
                    <GridColumn Field="DeviceName" Title="Device Name" Width="250px" />
                    <GridColumn Field="DeviceFunction" Width="250px" />
                    <GridColumn Field="TypeName" Width="250px" />
                    <GridColumn Field="Manufacturer" Width="250px" />
                    <GridColumn Field="Model" Width="250px" />
                    <GridColumn Field="Poc" Width="250px" />
                    <GridColumn Field="LocationName" Width="250px" />
                    <GridColumn Field="Floor" Width="250px" />
                    <GridColumn Field="Room" />
                    <GridColumn Field="PackageName" />
                    <GridColumn Field="CreatedDate" />
                    <GridColumn Field="CreatedBy" />
                    <GridColumn Field="ModifiedDate" />
                    <GridColumn Field="ModifiedBy" />
                </GridColumns>
            </TelerikGrid>
        }






@code {
    private List<IDevicesWithLookupsModel> deviceList;

    protected override async Task OnInitializedAsync()
    {
        deviceList = await deviceData.GetDevicesWithLookups();
    }
}