@page "/Devices"
@using System.Collections.ObjectModel;
@inject IDeviceData deviceData
@inject NavigationManager navigationManager

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h2>Devices</h2>
    <div class="btn-group me-2">
        <button type="button" class="btn btn-primary" @onclick="HandleCreateButtonClick">Create Device</button>
    </div>
</div>

@if (deviceList == null)
{
    <h4>Loading...</h4>
}
else
{
    <TelerikGrid Data="@deviceList" Pageable="true" Sortable="true" FilterMode="@GridFilterMode.FilterMenu"
             Resizable="true" ShowColumnMenu="true" Reorderable="true" Groupable="true" @ref="GridRef">
        <GridColumns>
            <GridCommandColumn Width="70px" Context="dataItem">
                <GridCommandButton ThemeColor="primary" Command="EditDevice" OnClick="@( () => HandleEditButtonClick(dataItem as IDevicesWithLookupsModel) )">Edit</GridCommandButton>
            </GridCommandColumn>
            <GridColumn Field="DeviceName" Title="Device Name" Width="250px"  />
            <GridColumn Field="DeviceFunction" Width="250px" />
            <GridColumn Field="TypeName" Width="250px" />
            <GridColumn Field="Manufacturer" Width="250px" />
            <GridColumn Field="Model" Width="250px" />
            <GridColumn Field="Poc" Width="250px" />
            <GridColumn Field="LocationName" Width="250px" />
            <GridColumn Field="Floor" Width="250px" />
            <GridColumn Field="Room" Width="250px" />
            <GridColumn Field="PackageName" Width="250px" />
            <GridColumn Field="CreatedDate" Width="250px" />
            <GridColumn Field="CreatedBy" Width="250px" />
            <GridColumn Field="ModifiedDate" Width="250px" />
            <GridColumn Field="ModifiedBy" Width="250px" />
           
        </GridColumns>
    </TelerikGrid>
}

<DeviceFormModal Id="deviceId" WindowVisible="@windowVisible" OnSubmitted="HandleOnSubmitted"></DeviceFormModal>

<TelerikNotification @ref="@Notification"
                     Class="demo-notification"
                     VerticalPosition="NotificationVerticalPosition.Bottom"
                     HorizontalPosition="NotificationHorizontalPosition.Right">
</TelerikNotification>

@code {
    private List<IDevicesWithLookupsModel> deviceList;
    //private ObservableCollection<IDevicesWithLookupsModel> devicesListObserved;
    public bool windowVisible = false;
    private int deviceId;
    private TelerikGrid<IDevicesWithLookupsModel> GridRef { get; set; }
    public TelerikNotification Notification { get; set; }

    protected override async Task OnInitializedAsync()
    {
        deviceList = await deviceData.GetDevicesWithLookups();
        //devicesListObserved = new ObservableCollection<IDevicesWithLookupsModel>(deviceList);
    }

    private void HandleEditButtonClick(IDevicesWithLookupsModel device)
    {
        //int id = (args.Item as IDevicesWithLookupsModel).Id; 
        //navigationManager.NavigateTo($"Devices/DeviceForm/{id}");
        deviceId = device.Id;
        windowVisible = true;

    }

    private void HandleCreateButtonClick()
    {
        deviceId = 0;
        windowVisible = true;

    }

    public async Task HandleOnSubmitted()
    {
        windowVisible = false;
        deviceList = await deviceData.GetDevicesWithLookups();
        ShowNotifications();
        //GridRef.Rebind();
    }

    public void ShowNotifications()
    {
        var closeDelay = 1500;

        Notification.Show(new NotificationModel()
            {
                Text = "Device successfully updated",
                ThemeColor = ThemeConstants.Notification.ThemeColor.Success,
                CloseAfter = closeDelay
            });
    }

}