@inject IDeviceData deviceData
@inject IDeviceTypeData deviceTypeData


<TelerikWindow Centered="true" @bind-Visible="@WindowVisible" Modal="true" Width="70%" Height="90%">
    <WindowTitle>
        Device Form
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
        <WindowAction Name="Maximize" />
    </WindowActions>

    <WindowContent>
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h2>Device Details</h2>
            <div class="mb-2 mb-md-0">
                @if (Id > 0)
                {
                    <button type="submit" class="btn btn-primary" form="form">Save</button>
                    <button type="button" class="btn btn-danger">Delete</button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary" form="form">Create</button>
                }

            </div>
        </div>

        <TelerikForm Model="@device" Columns="2" ColumnSpacing="25px" ValidationMessageType="@FormValidationMessageType.Tooltip"
                     Id="form" OnValidSubmit="HandleValidSubmit">
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>

            <FormItems>
                @if (Id > 0)
                {
                    <FormItem Field="@nameof(DisplayDeviceModel.Id)" Enabled="false"></FormItem>
                }

                <FormItem Field="@nameof(DisplayDeviceModel.DeviceName)"></FormItem>

                <FormItem>
                    <Template>
                        <label class="mb-2" for="deviceType">Device Type:</label>
                        <TelerikDropDownList Data="@deviceTypes" TextField="TypeName" ValueField="Id" @bind-Value="@device.DeviceTypeId" Id="deviceType">
                            <DropDownListSettings>
                                <DropDownListPopupSettings Height="auto" />
                            </DropDownListSettings>
                        </TelerikDropDownList>
                    </Template>
                </FormItem>

                <FormItem Field="@nameof(DisplayDeviceModel.Poc)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.Model)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.ManufacturerId)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.CreatedDate)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.CreatedBy)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.ModifiedDate)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.ModifiedBy)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.LocationId)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.LocationFloorId)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.LocationFloorRoomId)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.RmfPackageId)"></FormItem>
                <FormItem Field="@nameof(DisplayDeviceModel.NetworkId)"></FormItem>
                <FormItem>
                    <Template>
                        <label class="mb-2" for="deviceFunction">Device Function:</label>
                        <TelerikTextArea @bind-Value="@device.DeviceFunction" AutoSize="true" Id="deviceFunction" />
                    </Template>
                </FormItem>
            </FormItems>

            <FormButtons>
            </FormButtons>
        </TelerikForm>

        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h2>IP Addresses</h2>          
        </div>

        <DeviceIpsGrid DeviceId="@Id"></DeviceIpsGrid>      
    </WindowContent>
</TelerikWindow>



@code {
    [Parameter]
    public bool WindowVisible { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventCallback<string> OnSubmitted { get; set; }

    private IDeviceModel device = new DisplayDeviceModel();
    private List<IDeviceTypeModel> deviceTypes;



    protected override async Task OnParametersSetAsync()
    {
        device = new DisplayDeviceModel();

        if (Id > 0)
        {
            device = await deviceData.GetDeviceById(Id);
        }

        deviceTypes = await deviceTypeData.GetDeviceTypes();

    }

    private async Task HandleValidSubmit()
    {


        if (Id > 0)
        {
            device.ModifiedDate = DateTime.Now;
            await deviceData.UpdateDevice(device);
        }
        else
        {
            device.CreatedDate = DateTime.Now;
            await deviceData.CreateDevice(device); 
        }

        CloseWindow();

    }

    public void CloseWindow()
    {
        // doesn't really matter what value is passed back, just mainly use this to create a trigger on the parent component to do stuff from
        OnSubmitted.InvokeAsync("submitted");
    }
}
